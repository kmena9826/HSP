@model CS_HOSPITALARIO.Models.CS_DEFINICION_PROCEDIMIENTO

@{
    ViewBag.Title = "Nuevo Definición de Procedimiento";
}

<h2>@ViewBag.Title</h2>
<script src="~/bundles/jquery"></script>
<script src='~/Scripts/select2.min.js' type='text/javascript'></script>

<!-- CSS -->
<link href='~/Content/select2.min.css' rel='stylesheet' type='text/css'>

@using (Html.BeginForm("Definicion_Proc_Nuevo", "DefinicionProcedimiento", FormMethod.Post, new { id = "frm-defproc" }))
{
    <div class="row">
        <div class="col-xs-12">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group">
                @Html.LabelFor(model => model.ARTICULO, "Articulo", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownList("ARTICULO", null, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.ARTICULO, "", new { @class = "text-danger" })
                </div>

            </div>

            <div class="form-group">
                <div class="col-md-10">
                    @Html.HiddenFor(x => x.ARTICULO)
                    @Html.TextBoxFor(x => x.DESCRIPCION, new { @class = "form-control", placeholder = "Buscar Servicio", id = "ARTODESC" })
                    @Html.ValidationMessageFor(model => model.DESCRIPCION, null, new { @class = "label label-danger" })

                </div>
            </div>
        </div>








        @*<div class="form-group">
                @Html.LabelFor(model => model.DESCRIPCION, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.DESCRIPCION, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.DESCRIPCION, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.AREA_SERVICIO, "AREA_SERVICIO", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownList("AREA_SERVICIO", null, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.AREA_SERVICIO, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ACTIVO, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <div class="checkbox">
                        @Html.EditorFor(model => model.ACTIVO)
                        @Html.ValidationMessageFor(model => model.ACTIVO, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Create" class="btn btn-default" />
                </div>
            </div>*@
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script>
        function matchStart(params, data) {
            // If there are no search terms, return all of the data
            if ($.trim(params.term) === '') {
                return data;
            }

            // Skip if there is no 'children' property
            if (typeof data.children === 'undefined') {
                return null;
            }

            // `data.children` contains the actual options that we are matching against
            var filteredChildren = [];
            $.each(data.children, function (idx, child) {
                if (child.text.toUpperCase().indexOf(params.term.toUpperCase()) == 0) {
                    filteredChildren.push(child);
                }
            });

            // If we matched any of the timezone group's children, then set the matched children on the group
            // and return the group object
            if (filteredChildren.length) {
                var modifiedData = $.extend({}, data, true);
                modifiedData.children = filteredChildren;

                // You can return modified objects from here
                // This includes matching the `children` how you want in nested data sets
                return modifiedData;
            }

            // Return `null` if the term should not be displayed
            return null;
        }

        $(".ARTODESC").select2({
            matcher: matchStart
        });


    </script>

}
